El código que has proporcionado está configurando una aplicación de ASP.NET Core para escuchar solicitudes HTTPS, pero hay un detalle importante que debes considerar cuando se habla de seguridad.

Lo que hace este código:
WebApplication.CreateBuilder(args);: Crea el objeto builder que configura la aplicación. Este paso inicializa los servicios necesarios para que la aplicación funcione.

Construye.Services.AddControllers();: Agrega los servicios necesarios para manejar controladores MVC (Model-View-Controller). Esto es útil para APIs RESTful.

var app = Construye.Build();: Construye el objeto app, que es la aplicación en sí, a partir de la configuración definida en builder.

app.UseHttpsRedirection();: Esto habilita la redirección automática de todas las solicitudes HTTP a HTTPS. Esto es importante desde el punto de vista de la seguridad porque garantiza que las conexiones no cifradas (HTTP) sean redirigidas a versiones seguras (HTTPS). Sin embargo, esto solo es efectivo si tu aplicación está configurada para escuchar en un puerto HTTPS.

app.MapControllers();: Esto mapea las rutas para los controladores que hayas definido (como en tu controlador EjecutorController). Esto permite que las rutas de tu API estén disponibles para los clientes.

app.Run();: Este es el último paso, donde la aplicación comienza a ejecutarse y empieza a escuchar solicitudes en el puerto configurado.

¿Es segura esta configuración?
Por sí sola, esta configuración establece una buena base para la seguridad de tu aplicación, pero no es suficiente para garantizar que tu aplicación sea completamente segura. Aquí algunos puntos clave:

Lo bueno:
Redirección de HTTP a HTTPS (app.UseHttpsRedirection();): Esta es una buena práctica de seguridad. Asegura que el tráfico de la aplicación esté cifrado, evitando que los datos se transmitan sin protección. Esto ayuda a proteger la confidencialidad de la información y a prevenir ataques como "man-in-the-middle".
Cosas a considerar:
Certificado SSL/TLS:

HTTPS requiere un certificado SSL/TLS válido para cifrar las comunicaciones. Si estás desarrollando en un entorno local, puedes usar certificados auto-firmados, pero en producción necesitarás un certificado de una autoridad certificadora confiable.

Si tu servidor no tiene un certificado adecuado, HTTPS no funcionará correctamente.

En producción, se recomienda obtener un certificado de un proveedor confiable o usar un servicio como Let's Encrypt para obtener certificados gratuitos.

Configuración de HTTPS en el servidor:

Si estás ejecutando la aplicación en un entorno local, el servidor de desarrollo de ASP.NET Core ya proporciona soporte para HTTPS. En producción, debes asegurarte de que el servidor web (como Kestrel o IIS) esté configurado para aceptar conexiones HTTPS.

Para que HTTPS funcione correctamente en producción, debes configurar puertos HTTPS (usualmente el 443) y asegurarte de que las solicitudes sean redirigidas adecuadamente si el cliente trata de conectarse a través de HTTP.

Políticas de Seguridad (Headers):

Si bien la redirección HTTPS es un paso importante, también debes considerar implementar cabeceras de seguridad adicionales, como:
HSTS (HTTP Strict Transport Security): Esto obliga a los navegadores a solo hacer solicitudes HTTPS.
Content Security Policy (CSP): Para proteger contra ataques de inyección de código.
X-Content-Type-Options: Para evitar que los navegadores adivinen el tipo de contenido.
X-Frame-Options: Para prevenir ataques de "clickjacking".
Autenticación y Autorización:

La seguridad de tu API también depende de cómo manejas la autenticación y la autorización. Si tu API va a manejar datos sensibles, asegúrate de protegerla utilizando tecnologías como OAuth2, JWT (JSON Web Tokens) o API keys.
Asegúrate de que las solicitudes a tus API endpoints estén adecuadamente autenticadas y autorizadas según el rol o los permisos del usuario.
Configuración adicional para producción:

Si estás planeando desplegar tu aplicación en producción, es posible que desees configurar un reverse proxy (como Nginx o Apache) para manejar conexiones HTTPS de manera eficiente y manejar la seguridad a nivel de red.
Para ambientes de desarrollo, asegúrate de que el entorno de ASP.NET Core esté configurado correctamente para usar certificados de desarrollo.
Resumen:
El código que proporcionas está configurado para redirigir las solicitudes HTTP a HTTPS, lo cual es una buena práctica de seguridad para asegurarse de que las comunicaciones estén cifradas.

Sin embargo, hay que tener en cuenta que esto solo es un primer paso. Para garantizar la seguridad completa de tu aplicación, debes considerar lo siguiente:

Tener un certificado SSL/TLS válido.
Configurar adecuadamente tu servidor HTTPS.
Implementar políticas de seguridad adicionales (como HSTS).
Considerar cómo manejar la autenticación y autorización de manera segura.